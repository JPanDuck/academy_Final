<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ac.kr.academy.mapper.user.student.StudentMapper">
    <resultMap id="studentMap" type="com.ac.kr.academy.domain.user.Student">
        <id property="id" column="id" />
        <result property="studentNum" column="student_num" />
        <result property="status" column="status" />
        <result property="createdAt" column="created_at" />
        <result property="endedAt" column="ended_at" />
        <result property="deptId" column="dept_id" />
        <result property="userId" column="user_id" />
    </resultMap>

    <insert id="insertStudent" parameterType="com.ac.kr.academy.domain.user.Student">
        <selectKey keyProperty="id" order="BEFORE" resultType="long">
            SELECT student_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO student (id, student_num, created_at, dept_id, user_id)
        VALUES (#{id}, #{studentNum}, SYSDATE, #{deptId}, #{userId})
    </insert>

    <update id="updateStudent" parameterType="com.ac.kr.academy.domain.user.Student">
        UPDATE student
        <set>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="endedAt != null">
                ended_at = #{endedAt},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteStudent" parameterType="long">
        DELETE FROM student
        WHERE user_id = #{id}
    </delete>

    <select id="findByUserId" resultMap="studentMap">
        SELECT s.*, u.username, u.email, u.phone, u.role
        FROM student s
                 JOIN users u ON s.user_id = u.id
        WHERE s.user_id = #{userId}
    </select>

    <update id="updateStatusByUserId">
        UPDATE student
        SET status = #{status}
        WHERE user_id = #{userId}
    </update>

    <!--userId로 학생 테이블의 고유 id 조회-->
    <select id="findStudentIdByUserId" resultType="long">
        SELECT id
        FROM student
        WHERE user_id = #{userId}
    </select>

    <!--학과 ID 기반으로 해당 학과 학생들의 student 테이블 id 리스트 조회 (지도교수 관련 메소드)-->
    <select id="findAllStudentIdByDeptId" resultType="long">
        SELECT id
        FROM student
        WHERE dept_id = #{deptId}
    </select>
</mapper>